unit mvcLive.model.connection.impl.query;

interface

uses
  System.SysUtils,
  Data.DB,
  Firedac.Comp.Client,
  mvcLive.model.connection.interfaces;

type
  TQuery = class(TInterfacedObject, iQuery)
  private
    FQuery: TFDQuery;
    procedure PreencheQuery(Value : string);
    procedure PreencheParams(Value : array of Variant);
    constructor Create(Conn : iConnection);
    destructor Destroy; override;
  public
    class function New(Conn : iConnection): iQuery;
    procedure query(const Statement: string; Params: array of Variant); overload;
    function query(const Statement: Variant; Params: array of Variant): TDataSet; overload;
  end;

implementation

{ TQuery }

constructor TQuery.Create(Conn : iConnection);
begin
  FQuery := TFDQuery.Create(nil);
  FQuery.Connection := TFDConnection(Conn.Connection);
end;

destructor TQuery.Destroy;
begin
  FQuery.Free;
  inherited;
end;

class function TQuery.New(Conn : iConnection): iQuery;
begin
  Result := Self.Create(Conn);
end;

procedure TQuery.PreencheParams(Value: array of Variant);
var
  I: Integer;
begin
  for I := Low(Value) to High(Value) do
  begin
    FQuery.Params.Add;
    FQuery.Params[i].Value := Value[i];
  end;

end;

procedure TQuery.PreencheQuery(Value: string);
begin

end;

procedure TQuery.query(const Statement: string; Params: array of Variant);
begin

end;

function TQuery.query(const Statement: Variant;
  Params: array of Variant): TDataSet;
begin

end;

end.
